{
  parserClass="com.apophenic.csharpplugin.parser.CSharpParser"
  parserUtilClass="com.apophenic.csharpplugin.parser.CSharpParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="CSharp"
  psiImplClassSuffix="Impl"
  psiPackage="com.apophenic.csharpplugin.psi"
  psiImplPackage="com.apophenic.csharpplugin.psi.impl"

  elementTypeHolderClass="com.apophenic.csharpplugin.psi.CSharpTypes"
  elementTypeClass="com.apophenic.csharpplugin.CSharpElementType"
  tokenTypeClass="com.apophenic.csharpplugin.CSharpTokenType"

  psiImplUtilClass="com.apophenic.csharpplugin.psi.impl.CSharpPropertyImpl"
  generateTokenAccessors=true

  tokens=[
      LBRACE               =  '{'
      RBRACE               =  '}'
      LBRACK               =  '['
      RBRACK               =  ']'
      LPAREN               =  '('
      RPAREN               =  ')'
      COLON                =  ':'
      SEMI                 =  ';'
      COMMA                =  ','
      EQ                   =  '=='
      ASSIGN               =  '='
      NOT_EQ               =  '!='
      NOT                  =  '!'
      PLUS_PLUS            =  '++'
      PLUS_ASSIGN          =  '+='
      PLUS                 =  '+'
      MINUS_MINUS          =  '--'
      MINUS_ASSIGN         =  '-='
      MINUS                =  '-'
      COND_OR              =  '||'
      BIT_OR_ASSIGN        =  '|='
      BIT_CLEAR_ASSIGN     =  '&^='
      BIT_CLEAR            =  '&^'
      COND_AND             =  '&&'
      BIT_AND_ASSIGN       =  '&='
      BIT_AND              =  '&'
      BIT_OR               =  '|'
      SHIFT_LEFT_ASSIGN    =  '<<='
      SHIFT_LEFT           =  '<<'
      LESS_OR_EQUAL        =  '<='
      LESS                 =  '<'
      BIT_XOR_ASSIGN       =  '^='
      BIT_XOR              =  '^'
      MUL_ASSIGN           =  '*='
      MUL                  =  '*'
      QUOTIENT_ASSIGN      =  '/='
      QUOTIENT             =  '/'
      REMAINDER_ASSIGN     =  '%='
      REMAINDER            =  '%'
      SHIFT_RIGHT_ASSIGN   =  '>>='
      SHIFT_RIGHT          =  '>>'
      GREATER_OR_EQUAL     =  '>='
      GREATER              =  '>'
      DOT                  =  '.'

      WS                   = 'regexp:\s+'
      COMMENT              = 'regexp://.*'
      DIGIT                = 'regexp:\d+(\.\d*)?'
      STRING               = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
      IDENTIFIER           = 'regexp:\p{Alpha}\w*'
    ]
}

File ::= ImportList NamespaceDec
ImportList ::= ImportDec*
ImportDec ::= using IDENTIFIER (IDENTIFIER | DOT)* SEMI
NamespaceDec ::= namespace IDENTIFIER LBRACE ClassList RBRACE
ClassList ::= ClassDec*
ClassDec ::= AccessModifier? class IDENTIFIER LBRACE MethodList RBRACE

MethodList ::= MethodDec*
MethodDec ::= AccessModifier? Access_Types* Return_type IDENTIFIER LPAREN(Types IDENTIFIER)* RPAREN LBRACE Expr* RBRACE
{pin=8}

Expr ::= (VarDec)

VarDec ::= (Types | CustomObject) IDENTIFIER ASSIGN (new (Types | CustomObject) | (DIGIT | STRING)) SEMI


private AccessModifier ::= (public | private | protected)
private Access_Types ::= (abstract | final | static | sealed | partial | extern | intern)
private Return_type ::= (void | Types | CustomObject)
private CustomObject ::= IDENTIFIER Array?
private Types ::= (int | string | byte | object| enum | bool) Array?
private Array ::= (LBRACK RBRACK)


